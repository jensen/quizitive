/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/answers": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.answers.id"];
          created_at?: parameters["rowFilter.answers.created_at"];
          updated_at?: parameters["rowFilter.answers.updated_at"];
          content?: parameters["rowFilter.answers.content"];
          question_id?: parameters["rowFilter.answers.question_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["answers"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** answers */
          answers?: definitions["answers"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.answers.id"];
          created_at?: parameters["rowFilter.answers.created_at"];
          updated_at?: parameters["rowFilter.answers.updated_at"];
          content?: parameters["rowFilter.answers.content"];
          question_id?: parameters["rowFilter.answers.question_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.answers.id"];
          created_at?: parameters["rowFilter.answers.created_at"];
          updated_at?: parameters["rowFilter.answers.updated_at"];
          content?: parameters["rowFilter.answers.content"];
          question_id?: parameters["rowFilter.answers.question_id"];
        };
        body: {
          /** answers */
          answers?: definitions["answers"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/attempts": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.attempts.id"];
          created_at?: parameters["rowFilter.attempts.created_at"];
          updated_at?: parameters["rowFilter.attempts.updated_at"];
          correct?: parameters["rowFilter.attempts.correct"];
          started?: parameters["rowFilter.attempts.started"];
          ended?: parameters["rowFilter.attempts.ended"];
          user_id?: parameters["rowFilter.attempts.user_id"];
          quiz_id?: parameters["rowFilter.attempts.quiz_id"];
          answers?: parameters["rowFilter.attempts.answers"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["attempts"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** attempts */
          attempts?: definitions["attempts"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.attempts.id"];
          created_at?: parameters["rowFilter.attempts.created_at"];
          updated_at?: parameters["rowFilter.attempts.updated_at"];
          correct?: parameters["rowFilter.attempts.correct"];
          started?: parameters["rowFilter.attempts.started"];
          ended?: parameters["rowFilter.attempts.ended"];
          user_id?: parameters["rowFilter.attempts.user_id"];
          quiz_id?: parameters["rowFilter.attempts.quiz_id"];
          answers?: parameters["rowFilter.attempts.answers"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.attempts.id"];
          created_at?: parameters["rowFilter.attempts.created_at"];
          updated_at?: parameters["rowFilter.attempts.updated_at"];
          correct?: parameters["rowFilter.attempts.correct"];
          started?: parameters["rowFilter.attempts.started"];
          ended?: parameters["rowFilter.attempts.ended"];
          user_id?: parameters["rowFilter.attempts.user_id"];
          quiz_id?: parameters["rowFilter.attempts.quiz_id"];
          answers?: parameters["rowFilter.attempts.answers"];
        };
        body: {
          /** attempts */
          attempts?: definitions["attempts"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/correct": {
    get: {
      parameters: {
        query: {
          count?: parameters["rowFilter.correct.count"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["correct"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** correct */
          correct?: definitions["correct"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          count?: parameters["rowFilter.correct.count"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          count?: parameters["rowFilter.correct.count"];
        };
        body: {
          /** correct */
          correct?: definitions["correct"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/correct_answers": {
    get: {
      parameters: {
        query: {
          answer_id?: parameters["rowFilter.correct_answers.answer_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["correct_answers"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** correct_answers */
          correct_answers?: definitions["correct_answers"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          answer_id?: parameters["rowFilter.correct_answers.answer_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          answer_id?: parameters["rowFilter.correct_answers.answer_id"];
        };
        body: {
          /** correct_answers */
          correct_answers?: definitions["correct_answers"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/profiles": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profiles.id"];
          name?: parameters["rowFilter.profiles.name"];
          avatar?: parameters["rowFilter.profiles.avatar"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["profiles"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** profiles */
          profiles?: definitions["profiles"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profiles.id"];
          name?: parameters["rowFilter.profiles.name"];
          avatar?: parameters["rowFilter.profiles.avatar"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profiles.id"];
          name?: parameters["rowFilter.profiles.name"];
          avatar?: parameters["rowFilter.profiles.avatar"];
        };
        body: {
          /** profiles */
          profiles?: definitions["profiles"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/profiles_private": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profiles_private.id"];
          email?: parameters["rowFilter.profiles_private.email"];
          admin?: parameters["rowFilter.profiles_private.admin"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["profiles_private"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** profiles_private */
          profiles_private?: definitions["profiles_private"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profiles_private.id"];
          email?: parameters["rowFilter.profiles_private.email"];
          admin?: parameters["rowFilter.profiles_private.admin"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profiles_private.id"];
          email?: parameters["rowFilter.profiles_private.email"];
          admin?: parameters["rowFilter.profiles_private.admin"];
        };
        body: {
          /** profiles_private */
          profiles_private?: definitions["profiles_private"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/questions": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.questions.id"];
          created_at?: parameters["rowFilter.questions.created_at"];
          updated_at?: parameters["rowFilter.questions.updated_at"];
          content?: parameters["rowFilter.questions.content"];
          quiz_id?: parameters["rowFilter.questions.quiz_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["questions"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** questions */
          questions?: definitions["questions"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.questions.id"];
          created_at?: parameters["rowFilter.questions.created_at"];
          updated_at?: parameters["rowFilter.questions.updated_at"];
          content?: parameters["rowFilter.questions.content"];
          quiz_id?: parameters["rowFilter.questions.quiz_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.questions.id"];
          created_at?: parameters["rowFilter.questions.created_at"];
          updated_at?: parameters["rowFilter.questions.updated_at"];
          content?: parameters["rowFilter.questions.content"];
          quiz_id?: parameters["rowFilter.questions.quiz_id"];
        };
        body: {
          /** questions */
          questions?: definitions["questions"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/quizzes": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.quizzes.id"];
          created_at?: parameters["rowFilter.quizzes.created_at"];
          updated_at?: parameters["rowFilter.quizzes.updated_at"];
          name?: parameters["rowFilter.quizzes.name"];
          user_id?: parameters["rowFilter.quizzes.user_id"];
          slug?: parameters["rowFilter.quizzes.slug"];
          published?: parameters["rowFilter.quizzes.published"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["quizzes"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** quizzes */
          quizzes?: definitions["quizzes"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.quizzes.id"];
          created_at?: parameters["rowFilter.quizzes.created_at"];
          updated_at?: parameters["rowFilter.quizzes.updated_at"];
          name?: parameters["rowFilter.quizzes.name"];
          user_id?: parameters["rowFilter.quizzes.user_id"];
          slug?: parameters["rowFilter.quizzes.slug"];
          published?: parameters["rowFilter.quizzes.published"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.quizzes.id"];
          created_at?: parameters["rowFilter.quizzes.created_at"];
          updated_at?: parameters["rowFilter.quizzes.updated_at"];
          name?: parameters["rowFilter.quizzes.name"];
          user_id?: parameters["rowFilter.quizzes.user_id"];
          slug?: parameters["rowFilter.quizzes.slug"];
          published?: parameters["rowFilter.quizzes.published"];
        };
        body: {
          /** quizzes */
          quizzes?: definitions["quizzes"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/rpc/handle_new_user": {
    post: {
      parameters: {
        body: {
          args: { [key: string]: unknown };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/get_is_question_published": {
    post: {
      parameters: {
        body: {
          args: {
            _question_id: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/get_attempt_details": {
    post: {
      parameters: {
        body: {
          args: {
            attempt_id: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/get_is_answer_owner": {
    post: {
      parameters: {
        body: {
          args: {
            _answer_id: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/get_is_answer_selectable": {
    post: {
      parameters: {
        body: {
          args: {
            _answer_id: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/get_is_question_owner": {
    post: {
      parameters: {
        body: {
          args: {
            _question_id: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/slugify": {
    post: {
      parameters: {
        body: {
          args: { [key: string]: unknown };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/submit_attempt": {
    post: {
      parameters: {
        body: {
          args: {
            started: number;
            quiz_id: string;
            ended: number;
            answers: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
}

export interface definitions {
  answers: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    created_at: string;
    updated_at: string;
    content: string;
    /**
     * Note:
     * This is a Foreign Key to `questions.id`.<fk table='questions' column='id'/>
     */
    question_id: string;
  };
  attempts: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    created_at: string;
    updated_at: string;
    correct: number;
    started: number;
    ended: number;
    /**
     * Note:
     * This is a Foreign Key to `profiles.id`.<fk table='profiles' column='id'/>
     */
    user_id: string;
    /**
     * Note:
     * This is a Foreign Key to `quizzes.id`.<fk table='quizzes' column='id'/>
     */
    quiz_id: string;
    answers?: string;
  };
  correct: {
    count?: number;
  };
  correct_answers: {
    /**
     * Note:
     * This is a Foreign Key to `answers.id`.<fk table='answers' column='id'/>
     */
    answer_id: string;
  };
  profiles: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    name: string;
    avatar: string;
  };
  profiles_private: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `profiles.id`.<fk table='profiles' column='id'/>
     */
    id: string;
    email: string;
    admin: boolean;
  };
  questions: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    created_at: string;
    updated_at: string;
    content: string;
    /**
     * Note:
     * This is a Foreign Key to `quizzes.id`.<fk table='quizzes' column='id'/>
     */
    quiz_id: string;
  };
  quizzes: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    created_at: string;
    updated_at: string;
    name: string;
    /**
     * Note:
     * This is a Foreign Key to `profiles.id`.<fk table='profiles' column='id'/>
     */
    user_id: string;
    slug: string;
    published?: boolean;
  };
}

export interface parameters {
  /** Preference */
  preferParams: "params=single-object";
  /** Preference */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /** Preference */
  preferCount: "count=none";
  /** Filtering Columns */
  select: string;
  /** On Conflict */
  on_conflict: string;
  /** Ordering */
  order: string;
  /** Limiting and Pagination */
  range: string;
  /** Limiting and Pagination */
  rangeUnit: string;
  /** Limiting and Pagination */
  offset: string;
  /** Limiting and Pagination */
  limit: string;
  /** answers */
  "body.answers": definitions["answers"];
  "rowFilter.answers.id": string;
  "rowFilter.answers.created_at": string;
  "rowFilter.answers.updated_at": string;
  "rowFilter.answers.content": string;
  "rowFilter.answers.question_id": string;
  /** attempts */
  "body.attempts": definitions["attempts"];
  "rowFilter.attempts.id": string;
  "rowFilter.attempts.created_at": string;
  "rowFilter.attempts.updated_at": string;
  "rowFilter.attempts.correct": string;
  "rowFilter.attempts.started": string;
  "rowFilter.attempts.ended": string;
  "rowFilter.attempts.user_id": string;
  "rowFilter.attempts.quiz_id": string;
  "rowFilter.attempts.answers": string;
  /** correct */
  "body.correct": definitions["correct"];
  "rowFilter.correct.count": string;
  /** correct_answers */
  "body.correct_answers": definitions["correct_answers"];
  "rowFilter.correct_answers.answer_id": string;
  /** profiles */
  "body.profiles": definitions["profiles"];
  "rowFilter.profiles.id": string;
  "rowFilter.profiles.name": string;
  "rowFilter.profiles.avatar": string;
  /** profiles_private */
  "body.profiles_private": definitions["profiles_private"];
  "rowFilter.profiles_private.id": string;
  "rowFilter.profiles_private.email": string;
  "rowFilter.profiles_private.admin": string;
  /** questions */
  "body.questions": definitions["questions"];
  "rowFilter.questions.id": string;
  "rowFilter.questions.created_at": string;
  "rowFilter.questions.updated_at": string;
  "rowFilter.questions.content": string;
  "rowFilter.questions.quiz_id": string;
  /** quizzes */
  "body.quizzes": definitions["quizzes"];
  "rowFilter.quizzes.id": string;
  "rowFilter.quizzes.created_at": string;
  "rowFilter.quizzes.updated_at": string;
  "rowFilter.quizzes.name": string;
  "rowFilter.quizzes.user_id": string;
  "rowFilter.quizzes.slug": string;
  "rowFilter.quizzes.published": string;
}

export interface operations {}

export interface external {}
